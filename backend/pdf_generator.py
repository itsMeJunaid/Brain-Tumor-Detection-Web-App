from reportlab.lib.pagesizes import letter, A4
from reportlab.lib import colors
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_CENTER, TA_LEFT
from datetime import datetime
import os

def generate_medical_report(scan_data, output_path):
    """
    Generate a professional medical PDF report
    """
    doc = SimpleDocTemplate(output_path, pagesize=A4)
    story = []
    styles = getSampleStyleSheet()
    
    # Custom styles
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        textColor=colors.HexColor('#2563eb'),
        spaceAfter=30,
        alignment=TA_CENTER,
        fontName='Helvetica-Bold'
    )
    
    heading_style = ParagraphStyle(
        'CustomHeading',
        parent=styles['Heading2'],
        fontSize=14,
        textColor=colors.HexColor('#1e293b'),
        spaceAfter=12,
        fontName='Helvetica-Bold'
    )
    
    normal_style = ParagraphStyle(
        'CustomNormal',
        parent=styles['Normal'],
        fontSize=11,
        textColor=colors.HexColor('#334155'),
        spaceAfter=8
    )
    
    # Title
    title = Paragraph("BRAIN TUMOR DETECTION REPORT", title_style)
    story.append(title)
    story.append(Spacer(1, 0.3*inch))
    
    # Patient Information Table
    story.append(Paragraph("Patient Information", heading_style))
    patient_data = [
        ['Patient Name:', scan_data['patient_name']],
        ['Patient ID:', scan_data['patient_id']],
        ['Scan Date:', scan_data['scan_date']],
        ['Doctor:', scan_data['doctor_name']],
    ]
    
    patient_table = Table(patient_data, colWidths=[2*inch, 4*inch])
    patient_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#f1f5f9')),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.HexColor('#1e293b')),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
        ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e2e8f0'))
    ]))
    story.append(patient_table)
    story.append(Spacer(1, 0.3*inch))
    
    # Diagnosis Results
    story.append(Paragraph("Diagnosis Results", heading_style))
    
    # Result with color coding
    result_color = colors.HexColor('#ef4444') if scan_data['prediction'] == 'Tumor' else colors.HexColor('#10b981')
    result_data = [
        ['Prediction:', scan_data['prediction']],
        ['Confidence:', f"{scan_data['confidence']:.2f}%"],
    ]
    
    result_table = Table(result_data, colWidths=[2*inch, 4*inch])
    result_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#f1f5f9')),
        ('TEXTCOLOR', (0, 0), (0, -1), colors.HexColor('#1e293b')),
        ('TEXTCOLOR', (1, 0), (1, 0), result_color),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
        ('FONTNAME', (1, 0), (1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 11),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
        ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e2e8f0'))
    ]))
    story.append(result_table)
    story.append(Spacer(1, 0.3*inch))
    
    # MRI Images
    story.append(Paragraph("MRI Scan Analysis", heading_style))
    
    # Add images if they exist
    if os.path.exists(scan_data['image_path']):
        try:
            img = Image(scan_data['image_path'], width=2.5*inch, height=2.5*inch)
            story.append(Paragraph("Original MRI Scan:", normal_style))
            story.append(img)
            story.append(Spacer(1, 0.2*inch))
        except:
            pass
    
    if os.path.exists(scan_data['gradcam_path']):
        try:
            gradcam_img = Image(scan_data['gradcam_path'], width=2.5*inch, height=2.5*inch)
            story.append(Paragraph("AI Focus Area (Grad-CAM):", normal_style))
            story.append(gradcam_img)
            story.append(Spacer(1, 0.2*inch))
        except:
            pass
    
    # Notes section
    if scan_data.get('notes'):
        story.append(Spacer(1, 0.2*inch))
        story.append(Paragraph("Clinical Notes", heading_style))
        story.append(Paragraph(scan_data['notes'], normal_style))
    
    # Disclaimer
    story.append(Spacer(1, 0.5*inch))
    disclaimer_style = ParagraphStyle(
        'Disclaimer',
        parent=styles['Normal'],
        fontSize=8,
        textColor=colors.HexColor('#64748b'),
        alignment=TA_LEFT
    )
    disclaimer_text = """
    <b>Disclaimer:</b> This report is generated by an AI-assisted diagnostic tool and should be used 
    as a supplementary aid only. Final diagnosis must be confirmed by qualified medical professionals 
    through comprehensive clinical evaluation and additional diagnostic procedures.
    """
    story.append(Paragraph(disclaimer_text, disclaimer_style))
    
    # Footer
    footer_style = ParagraphStyle(
        'Footer',
        parent=styles['Normal'],
        fontSize=9,
        textColor=colors.HexColor('#94a3b8'),
        alignment=TA_CENTER
    )
    story.append(Spacer(1, 0.3*inch))
    story.append(Paragraph(f"Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", footer_style))
    
    # Build PDF
    doc.build(story)
    return output_path