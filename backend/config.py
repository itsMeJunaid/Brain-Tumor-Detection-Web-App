
"""
Configuration settings for Brain Tumor Detection Application
Modify these values according to your deployment needs
"""

import os
from pathlib import Path

# ============================================================
# BASE DIRECTORIES
# ============================================================
BASE_DIR = Path(__file__).resolve().parent.parent
UPLOAD_DIR = BASE_DIR / "uploads"
REPORT_DIR = BASE_DIR / "reports"
MODEL_DIR = BASE_DIR / "model"

# Create directories if they don't exist
UPLOAD_DIR.mkdir(exist_ok=True)
REPORT_DIR.mkdir(exist_ok=True)

# ============================================================
# DATABASE CONFIGURATION
# ============================================================
DATABASE_URL = "sqlite:///./database.db"

# For PostgreSQL (production):
# DATABASE_URL = "postgresql://user:password@localhost/brain_tumor_db"

# For MySQL:
# DATABASE_URL = "mysql://user:password@localhost/brain_tumor_db"

# ============================================================
# SECURITY SETTINGS
# ============================================================
# IMPORTANT: Change this in production!
SECRET_KEY = "your-secret-key-change-in-production-09876543210"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 1440  # 24 hours

# Password Requirements
MIN_PASSWORD_LENGTH = 6
REQUIRE_UPPERCASE = False
REQUIRE_NUMBERS = False
REQUIRE_SPECIAL_CHARS = False

# ============================================================
# MODEL CONFIGURATION
# ============================================================
MODEL_PATH = MODEL_DIR / "best_model.h5"
MODEL_INPUT_SIZE = (224, 224)  # ResNet50 default
CONFIDENCE_THRESHOLD = 0.5  # Threshold for tumor detection

# ============================================================
# FILE UPLOAD SETTINGS
# ============================================================
MAX_UPLOAD_SIZE = 10 * 1024 * 1024  # 10 MB
ALLOWED_EXTENSIONS = {'.jpg', '.jpeg', '.png'}
IMAGE_QUALITY = 95  # JPEG quality for saved images

# ============================================================
# API CONFIGURATION
# ============================================================
API_HOST = "0.0.0.0"
API_PORT = 8000
API_RELOAD = True  # Set to False in production
CORS_ORIGINS = [
    "http://localhost",
    "http://localhost:8000",
    "http://localhost:8080",
    "http://127.0.0.1:8000",
    "*"  # Allow all origins (restrict in production)
]

# ============================================================
# GRAD-CAM SETTINGS
# ============================================================
GRADCAM_COLORMAP = 'COLORMAP_JET'  # OpenCV colormap
GRADCAM_ALPHA = 0.4  # Overlay transparency (0.0 to 1.0)
GRADCAM_ORIGINAL_WEIGHT = 0.6

# ============================================================
# PDF REPORT SETTINGS
# ============================================================
PDF_PAGE_SIZE = 'A4'  # or 'letter'
PDF_LOGO_PATH = None  # Path to hospital/clinic logo
PDF_FOOTER_TEXT = "Generated by Brain Tumor AI Detection System"
INCLUDE_DISCLAIMER = True

DISCLAIMER_TEXT = """
This report is generated by an AI-assisted diagnostic tool and should be used 
as a supplementary aid only. Final diagnosis must be confirmed by qualified 
medical professionals through comprehensive clinical evaluation and additional 
diagnostic procedures.
"""

# ============================================================
# LOGGING CONFIGURATION
# ============================================================
LOG_LEVEL = "INFO"  # DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_FILE = BASE_DIR / "app.log"
LOG_FORMAT = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"

# ============================================================
# MEDICAL COMPLIANCE
# ============================================================
# HIPAA Compliance Settings
ENABLE_AUDIT_LOG = True
LOG_ALL_ACCESS = True
ENCRYPT_PATIENT_DATA = False  # Requires additional setup
DATA_RETENTION_DAYS = 365 * 7  # 7 years (adjust per regulations)

# ============================================================
# PERFORMANCE SETTINGS
# ============================================================
# Model Optimization
USE_GPU = True  # Set to False if no GPU available
MODEL_BATCH_SIZE = 1
TENSORFLOW_THREADS = 4

# Database
DB_POOL_SIZE = 5
DB_MAX_OVERFLOW = 10

# ============================================================
# FEATURE FLAGS
# ============================================================
ENABLE_SIGNUP = True  # Disable to prevent new registrations
ENABLE_PDF_DOWNLOAD = True
ENABLE_SCAN_HISTORY = True
ENABLE_STATISTICS = True
ENABLE_NOTES = True

# ============================================================
# NOTIFICATION SETTINGS (Future Enhancement)
# ============================================================
ENABLE_EMAIL_NOTIFICATIONS = False
SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_USERNAME = "your-email@gmail.com"
SMTP_PASSWORD = "your-app-password"
EMAIL_FROM = "noreply@braintumor-ai.com"

# ============================================================
# CLOUD STORAGE (Optional)
# ============================================================
USE_CLOUD_STORAGE = False
CLOUD_PROVIDER = "aws"  # "aws", "gcp", "azure"

# AWS S3 Configuration
AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID", "")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY", "")
AWS_BUCKET_NAME = "brain-tumor-scans"
AWS_REGION = "us-east-1"

# ============================================================
# ADMIN SETTINGS
# ============================================================
ADMIN_EMAIL = "admin@hospital.com"
ENABLE_ADMIN_PANEL = False  # Future enhancement

# ============================================================
# RATE LIMITING (Security)
# ============================================================
ENABLE_RATE_LIMIT = False
MAX_REQUESTS_PER_MINUTE = 60
MAX_UPLOAD_PER_HOUR = 100

# ============================================================
# DEVELOPMENT/PRODUCTION MODE
# ============================================================
DEBUG_MODE = True  # Set to False in production
ENVIRONMENT = "development"  # "development", "staging", "production"

def get_config():
    """
    Returns configuration dictionary
    Usage: from config import get_config
    """
    return {
        "database_url": DATABASE_URL,
        "secret_key": SECRET_KEY,
        "model_path": str(MODEL_PATH),
        "upload_dir": str(UPLOAD_DIR),
        "report_dir": str(REPORT_DIR),
        "api_host": API_HOST,
        "api_port": API_PORT,
        "environment": ENVIRONMENT,
        "debug": DEBUG_MODE,
    }

# ============================================================
# VALIDATION
# ============================================================
def validate_config():
    """Validate critical configuration settings"""
    errors = []
    
    if not MODEL_PATH.exists():
        errors.append(f"Model file not found: {MODEL_PATH}")
    
    if SECRET_KEY == "your-secret-key-change-in-production-09876543210" and ENVIRONMENT == "production":
        errors.append("SECRET_KEY must be changed in production!")
    
    if not UPLOAD_DIR.exists():
        errors.append(f"Upload directory not found: {UPLOAD_DIR}")
    
    if USE_GPU:
        try:
            import tensorflow as tf
            gpus = tf.config.list_physical_devices('GPU')
            if not gpus:
                print("‚ö†Ô∏è  Warning: GPU enabled but no GPU detected. Using CPU.")
        except:
            pass
    
    if errors:
        print("‚ùå Configuration Errors:")
        for error in errors:
            print(f"  - {error}")
        return False
    
    print("‚úÖ Configuration validated successfully!")
    return True

if __name__ == "__main__":
    # Run validation when config is executed directly
    validate_config()
    print("\nüìã Current Configuration:")
    for key, value in get_config().items():
        print(f"  {key}: {value}")